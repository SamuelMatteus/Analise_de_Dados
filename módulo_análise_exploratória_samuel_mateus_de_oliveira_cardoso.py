# -*- coding: utf-8 -*-
"""Módulo : Análise Exploratória - SAMUEL MATEUS DE OLIVEIRA CARDOSO

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1MagXMUTx-yUne_nPDkmCg_Gcpsn88fZl

Fazendo uso do DataSet Adult: https://archive.ics.uci.edu/dataset/2/adult


O Objetivo é analisar os dados do dataset, excluir os outliers, realizar as minerações e correção dos dados para apresentar em gráficos os resultados e possíveis identificações com bases neles.

IMPORTANDO OS PACOTES PARA TRAZER O DATASET:
"""

pip install ucimlrepo

#Importando o Dataset:
from ucimlrepo import fetch_ucirepo

adult = fetch_ucirepo(id=2)

X = adult.data.features
y = adult.data.targets

print(adult.metadata)
print(adult.variables)

# Commented out IPython magic to ensure Python compatibility.
import pandas as pd
import numpy as np
import matplotlib.pyplot as plt
# %matplotlib inline

dataset = pd.DataFrame(X)
print(dataset.head())

dataset.describe()

"""Existem colunas que podem ser retiradas pelo motivo que não vão alterar os dados, e que os seus dados não serão usados na análise.

"""

print(dataset['capital-loss'])

#Deletando a coluna 'Capital Loss'
del dataset['capital-loss']

#Reexibindo o dataset para conferir a exclusão da coluna
print(dataset.head())

dataset.describe()

#Não há necessidade também da coluna fnlwgt
del dataset['fnlwgt']

#Aproveitando um recurso próprio do Colab,
#ele gera alguns modelos prontos de gráficos
dataset.describe()

#Criando a tabela que mostra a média de ganhos por idade:
dataset.hist(column='age', figsize=(9,6), bins=20)

"""Como o foco do DataSet é em adultos, julgo que não há necessidade de ter dados de pessoas com mais de 70 anos."""

limite_idade = 70
dataset_filtrado_idade = dataset[dataset['age']<= limite_idade]
print(dataset.head())

#Criando a nova tabela que mostra a média de ganhos por idade(Filtrado até 70 anos):
dataset_filtrado_idade.hist(column='age', figsize=(9,6), bins=20)

#Conferindo o tipo das colunas do dataset:
dataset_filtrado_idade.dtypes
dataset_filtrado_idade.describe()

print(dataset_filtrado_idade['capital-gain'])

dfcatname = dataset_filtrado_idade.dtypes[dataset_filtrado_idade.dtypes == 'object'].index
dfcatname

# Extraindo variáveis do tipo numéricas contínuas
dfconname = [item for item in list(dataset_filtrado_idade.columns) if item not in list(dfcatname)]
dfconname

# Descrevendo as variáveis categóricas
dataset_filtrado_idade[dfcatname].describe()

# Coletando estatísticas das colunas
dataset_filtrado_idade.describe()

# Descrevendo a coluna capital-gain
dataset_filtrado_idade['capital-gain'].describe()

dataset_filtrado_idade['capital-gain'].isnull().sum()

#Calcula a média de ganhos, e média de idades:
media_capital_gain = dataset_filtrado_idade['capital-gain'].mean()
media_ages = dataset_filtrado_idade['age'].mean()
print(media_capital_gain, media_ages)

dataset_filtrado_idade['occupation'].value_counts().plot(kind='bar')

"""Ao exibir o Gráfico, percebo que há uma opção preenchida com " ? " .

Para fins de exibição, irei substituir pelo nome "Não informado"
"""

#Corrigindo "?" por "Desconhecido/Não Informado"
dataset_filtrado_idade['occupation'] = dataset_filtrado_idade['occupation'].replace("?", "Desconhecido/Não informado")
dataset_filtrado_idade['occupation'].value_counts().plot(kind='bar')

dataset_filtrado_idade.describe()
dataset_filtrado_idade.head()

#Conferindo os itens que aparece na coluna para corrigir:
dataset_filtrado_idade['sex'].unique()

dataset_filtrado_idade['race'].unique()

dataset_filtrado_idade['native-country'].unique()

#Corrigindo " ? " por "Desconhecido"
dataset_filtrado_idade['native-country'] = dataset_filtrado_idade['native-country'].replace("?", "Desconhecido/Não informado")

#Conferindo se a mudança ocorreu corretamente.
dataset_filtrado_idade['native-country'].unique()

education_gain = dataset_filtrado_idade.groupby('education')['capital-gain'].mean().reset_index()

#gráfico de barras Educação por Renda
plt.figure(figsize=(10, 6))
plt.bar(education_gain['education'], education_gain['capital-gain'])
plt.xlabel('Level of Education')
plt.ylabel('Média de Capital Gain')
plt.title('Education for Capital Gain')
plt.xticks(rotation=45)
# Rotaciona os rótulos no eixo x para melhor leitura
plt.show()

occupation_age = dataset.groupby('occupation')['age'].mean().reset_index()

# Cria o gráfico de barras de relação da média de idades por ocupação.
plt.figure(figsize=(10, 6))
plt.bar(occupation_age['occupation'], occupation_age['age'])

plt.ylabel('Average Age')
plt.title('Average Age by Occupation.')
plt.xticks(rotation=45)  # Rotaciona os rótulos no eixo x para melhor leitura

# Exiba o gráfico
plt.show()

race_earnings = dataset_filtrado_idade.groupby('race')['capital-gain'].mean().reset_index()

#Gráfico Ganhos por Raça
plt.figure(figsize=(10, 6))
plt.bar(race_earnings['race'], race_earnings['capital-gain'])

plt.ylabel('Average Capital Gain')
plt.title('Relationship between Race and Average Capital Gain')
plt.xticks(rotation=45)  # Rotaciona os rótulos no eixo x para melhor leitura

# Exiba o gráfico
plt.show()

sex_earnings = dataset_filtrado_idade.groupby('sex')['capital-gain'].mean().reset_index()

# Crie o gráfico de barras
plt.figure(figsize=(6, 4))
plt.bar(sex_earnings['sex'], sex_earnings['capital-gain'])
plt.xlabel('Sex')
plt.ylabel('Average Capital Gain')
plt.title('Relationship between Sex and Average Capital Gain')

# Exiba o gráfico
plt.show()

plt.figure(figsize=(8, 6))
plt.scatter(dataset_filtrado_idade['age'], dataset_filtrado_idade['capital-gain'], alpha=0.5)
plt.xlabel('Age')
plt.ylabel('Capital Gain')
plt.title('Scatter Plot of Age vs. Capital Gain')

# Exiba o gráfico de dispersão
plt.show()

"""Ao fazer o gráfico de dispersão encontro um Outlier, de pessoas que ganham muito acima da média dos outros participantes do data set, para descartar, estabeleço 70000 como um novo limite."""

limite_ganhos = 70000

dataset_filtro_ganhos = dataset_filtrado_idade[dataset_filtrado_idade['capital-gain']<= limite_ganhos]
print(dataset_filtro_ganhos.head())

#Refazendo o gráfico, dessa vez com o filtro de capital gain em 70000:
plt.figure(figsize=(8, 6))
plt.scatter(dataset_filtro_ganhos['age'], dataset_filtro_ganhos['capital-gain'], alpha=0.5)
plt.xlabel('Age')
plt.ylabel('Capital Gain')
plt.title('Scatter Plot of Age vs. Capital Gain')

# Exiba o gráfico de dispersão
plt.show()

"""Para essa nova situação, não vejo a necessidade de retirar os que se encontram entre 30 e 40 mil, pois não são poucos pontos, e retratam a diferença social entre os ganhos de capital"""

marital_status_gain = dataset_filtro_ganhos.groupby('marital-status')['capital-gain'].mean().reset_index()

# Crie o gráfico de barras
plt.figure(figsize=(10, 6))
plt.bar(marital_status_gain['marital-status'], marital_status_gain['capital-gain'])
plt.xlabel('Marital-Status')
plt.ylabel('Average Capital Gain')
plt.title('Average Capital Gain by Marital Status')
plt.xticks(rotation=45)
# Rotaciona os rótulos no eixo x para melhor leitura
# Gráfico da média de ganhos por status relacional
# Exiba o gráfico de barras
plt.show()

